server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
    # TODO - gateway로써 설정 값
    # TODO - Spring Cloud Gateway는 비동기 방식으로 지원한다.
    # TODO - Embeded WAS로 비동기를 지원하는 Netty를 사용

  cloud:
    gateway:
      default-filters:
        # TODO - Filter Class 명 기재
        - name: GlobalFilter
          # TODO - GlobalFilter 안에 Config 필드로 주입
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      # TODO - Gateway의 routing은 Round-Robin 방식으로 Load Balance 한다.
      routes:
#        - id: user-service
#          # TODO - Eureka에 등록된 이름
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user-service/**
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            # TODO - login 처리
            - Path=/user-service/login
            - Method=POST
          filters:
            # TODO - Request Header 값을 초기화
            # TODO - 여기서는 Request에서 Cookie를 초기화한다.
            # TODO - Cookie의 사용자 정보가 담겨있을 경우 XSS등의 해킹의 수단으로 사용될 수 있다.
            - RemoveRequestHeader=Cookie
            # TODO - Path를 다시 작성
            # TODO - /user-service/** -> /** 형태로 변경
            # TODO - 정규식인지는 모르겠지만 패턴을 외워놓자
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            # TODO - 회원가입
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            # TODO - 그외 API
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**
        - id: first-service
          # TODO - 위치 정보
          # TODO - predicates에서 설정한 context path 정보가 그대로 붙어서 호출된다.
#          uri: http://localhost:8081
          # TODO - 요청에 대한 조건 정보
          # TODO - Path=/context-path/**
          # TODO - Naming Server(Eureka)에 등록되어 있는 이름으로 작성
          # TODO - Sacle-out 하기 위해 Server instance를 여러개 띄우는 경우 port가 아닌 Name으로 관리
          uri: lb://FIRST-SERVICE
          predicates:
            - Path=/first-service/**
          filters:
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
            # TODO - Filter Class 명 기재
            - CustomFilter
        - id: second-service
#          uri: http://localhost:8082
          uri: lb://SECOND-SERVICE
          predicates:
            - Path=/second-service/**
          filters:
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-response, second-response-header2
            # TODO - Filter에 추가적으로 properties(args)를 전달하고자 한다면, name이라는 키로 명시해줘야 한다.
            # TODO - lb는 Load Balancer
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Hi. there.
                preLogger: true
                postLogger: true